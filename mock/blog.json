{"data":[{"url":"https://buttercms.com/blog/options-for-adding-a-blog-to-python-application","created":"2017-06-28T18:54:19.709160Z","published":"2017-06-29T18:54:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://cdn.buttercms.com/g1cZUD1XSPmAKG7of4dv","slug":"options-for-adding-a-blog-to-python-application","title":"How Wedding Together added a blog to their Django app in 5 minutes","body":"<p><em>This is guest post written by Adam Yala, a Python and Django developer at Wedding Together. &nbsp;Find him on <a href=\"https://github.com/adamyala/\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</em></p>\r\n<h2 id=\"optionsforaddingablogtopythonapplication\">Our Problem</h2>\r\n<p>We&rsquo;re python developers and we want to add a blog to <a href=\"https://weddingtogether.co\">Wedding Together</a>. Wedding Together is a mobile app that allows wedding guests to share photos they take at weddings. Adding a blog to a website is a problem as old as the internet. If we find ourselves reinventing the wheel, we&rsquo;re probably doing it wrong. I could discuss building our own blogging system from scratch, but there are already plenty of articles on how to do that.</p>\r\n<h2 id=\"ourrequirements\">Our Requirements</h2>\r\n<ul>\r\n<li>We don&rsquo;t want to worry about SEO. It should&nbsp;come built-in.</li>\r\n<li>We want to put whatever code we pull from GitHub to live at weddingtogether.co/blog without any NGINX/Apache witchcraft.</li>\r\n<li>We don&rsquo;t want to be editing HTML files or writing code every time a content change is made.</li>\r\n</ul>\r\n<p>One requirement makes a clear separation between all the paths we can take. <strong>We want to protect and improve our development processes.</strong></p>\r\n<p>If we don&rsquo;t want:</p>\r\n<ul>\r\n<li>a separate set of SASS stylesheets just for this blog.</li>\r\n<li>to spend time managing security updates.</li>\r\n<li>to mess with our current configuration.</li>\r\n<li>to role our own solution.</li>\r\n</ul>\r\n<p>Our option is to pick a managed solution. We&rsquo;ll go over those second. If we&rsquo;re ok with some&nbsp;of those things, then we have two self-managed options.</p>\r\n<h2 id=\"ouroptions\">Our Options</h2>\r\n<h3 id=\"selfmanaged\">Self Managed</h3>\r\n<p>The two most popular python web frameworks are <a href=\"https://www.djangoproject.com/\">Django</a> and <a href=\"http://flask.pocoo.org/\">Flask</a>. Wedding Together&rsquo;s backend is built with Django, so we&rsquo;ll start there. A few Google searches later we find <a href=\"http://mezzanine.jupo.org/\">Mezzanine</a> to be the most active Django blog project. If the best option involves the downside of creating an additional application to take care of, we might as well look up options in Flask. The two most used options are <a href=\"https://github.com/dmaslov/flask-blog\">flask-blog</a> and <a href=\"https://github.com/gouthambs/Flask-Blogging\">Flask-Blogging</a>. flask-blog hasn&rsquo;t been updated in 3 years. Flask-Blogging is our &ldquo;Mezzanine level&rdquo; blog option but in Flask. Both Mezzanine and Flask-Blogging have the following pros and cons:</p>\r\n<ul>\r\n<li>Pros:\r\n<ul>\r\n<li>Has all the bells and whistles out of the box. We don&rsquo;t want to deal with things like SEO and meta what-not.</li>\r\n<li>Hackable if we want to make modifications</li>\r\n<li>Simple non-developer interface for making blog posts</li>\r\n<li>&ldquo;Free&rdquo; (explained below)</li>\r\n</ul>\r\n</li>\r\n<li>Cons\r\n<ul>\r\n<li><strong>Requires us to manage and maintain another application</strong></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>Depending on how your infrastructure is setup, adding another application could be as simple as pip installing on a server or as difficult as adding another machine to your already growing architecture.</p>\r\n<p>Most web/software companies have one resource that they&rsquo;ll never get enough of, developer time. Mezzanine and Flask-Blogging are &ldquo;free&rdquo; if you don&rsquo;t consider developer time. If you account for developer time in implementing these options, they are among the most expensive options you could pick.</p>\r\n<h3 id=\"managedforus\">Managed For Us</h3>\r\n<p>Let&rsquo;s look at a managed option that is almost free in a sense of developer time. <a href=\"../\">ButterCMS</a> is a managed blog option with the most developer friendly API possible. I've tried out half a dozen blog API options and ButterCMS is truly the easiest and most simple.</p>\r\n<p>We log into the interface on their site to write a blog post.</p>\r\n<p><img src=\"https://cdn.buttercms.com/S7L9ewu7TR6Cpx31uJmQ\" alt=\"\" /></p>\r\n<p>We install the python module.</p>\r\n<pre><code>pip install buttercms-python\r\n</code></pre>\r\n<p>We pull our blog post:</p>\r\n<pre><code>from butter_cms import ButterCMS\r\n\r\n\r\ndef blog(request):\r\n    client = ButterCMS('your-token-goes-here')\r\n    posts = client.posts.all()\r\n    return render(request, 'blog.html', {'posts': posts})\r\n</code></pre>\r\n<p>Put it in our template:</p>\r\n<pre><code>{% for post in posts %}\r\n    &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\r\n\r\n    &lt;p&gt;{{ post.body|safe }}&lt;/p&gt;\r\n{% endfor %}\r\n</code></pre>\r\n<p>And that's it!</p>\r\n<p><img src=\"https://cdn.buttercms.com/U7oBxCIR1uW8sv1htFrV\" alt=\"\" /></p>\r\n<p>My example is missing couple tiny tweaks to make Django play perfectly their API, all of which are covered <a href=\"../docs/api-client/django#Blogging\">here</a> in their docs.</p>\r\n<h2 id=\"ourchoice\">Our Choice</h2>\r\n<p>Spinning up an instance of Mezzanine or Flask-Blogging is a definite possibility, but took me more hours than I'd like to admit to get going. I'm also not exactly looking forward to dealing with another database and django application as time goes on.</p>\r\n<p>Adding a managed option like ButterCMS took me about 5 minutes and I know I'll never have to mess with it again.</p>\r\n<p>Most of the other blogging APIs are filled with cryptic terms like \"blog modelling\" or having to navigate a \"content delivery API\" vs a \"content management API\". ButterCMS touts a simple and straight forward system that lets you focus on building your company and products.</p>","summary":"Adding a blog to a website is a problem as old as the internet. If we find ourselves reinventing the wheel, we’re probably doing it wrong.","seo_title":"Options For Adding A Blog to Python Application","meta_description":"Adding a blog to a website is a problem as old as the internet. If we find ourselves reinventing the wheel, we’re probably doing it wrong.","status":"published"},{"url":"https://buttercms.com/blog/5-things-you-should-know-about-immutable-objects","created":"2017-06-29T01:00:40.049736Z","published":"2017-06-29T01:00:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://cdn.buttercms.com/qM2TdK5qRq8bHLhIQ6gL","slug":"5-things-you-should-know-about-immutable-objects","title":"5 Things You Should Know About Immutable Objects","body":"<p>When first learning object oriented programming (OOP), you typically create a very basic object and implement getters and setters. From that point forward, objects are this magical world of malleable data. However, you&rsquo;d be surprised to find that sometimes removing the ability to alter the data in an object can lead to more straightforward and easier to understand code. This is the case with immutable objects.</p>\r\n<p>In programming, an immutable object is an object whose state cannot be modified after it is created. While at first this may not seem very useful as often times the getters and setters are the first functions created for an object, there are many clear benefits to immutable objects.</p>\r\n<h3>Thread safety</h3>\r\n<p>Given that by definition an immutable object cannot be changed, you will not have any synchronization issues when using them. No matter which thread is accessing the version of an object, it is guaranteed to have the same state it originally had. If one thread needs a new version or altered version of that object, it must create a new one therefore any other threads will still have the original object. This leads to simpler, more thread safe code.</p>\r\n<p>PHP specifically does not support threads out of the box, so this benefit isn&rsquo;t as immediately obvious when using that language.</p>\r\n<h3>No invalid state</h3>\r\n<p>Once you are given an immutable object and verify its state, you know it will always remain safe. No other thread or background process in your program will be able to change that object without your direct knowledge. Furthermore, all of the data needed to have a complete object should be provided. One situation in which this may be extremely useful it programs that need to have high security. For instance, if given an object with a filename to write to you know nothing can change that location on you.</p>\r\n<p>For example, the code below outlines how constructing an immutable object may look. Since the <code>SimplePerson</code> class requires all of it&rsquo;s data in the constructor, we can be sure all the necessary data to have a valid object will always be present. If instead we had used setters for this data, there is no guarantee that a function like <code>setAge($age)</code> would have been called by the time we received the object.</p>\r\n<pre>&lt;?php<br /><br />class SimplePerson<br />{<br />    public function __construct($name, $age) { ... }<br />}<br />$universe-&gt;create(new SimplePerson(&lsquo;Joe&rsquo;, 42));</pre>\r\n<h3>Better encapsulation</h3>\r\n<p>When passing immutable objects around your code base, you can better encapsulate your methods. Since you know the object won&rsquo;t change, anytime you pass this object to another method you can be positive that doing so will not alter the original state of that object in the calling code.</p>\r\n<p>This also means these objects can always be passed by reference, and there is no need to have to worry about solutions like <a href=\"http://en.wikipedia.org/wiki/Defensive_copy\" target=\"_blank\" rel=\"noopener noreferrer\">defensive copying</a>.</p>\r\n<p>Furthermore, debugging will be easier when any issues arise. You can be certain that the state the object is given to you in doesn&rsquo;t change and therefore more easily track down where bugs started from.</p>\r\n<p>The code below helps outline this benefit. In this code, both auto body shops we have created will have a Mercedes car associated with it since our object was not immutable. This was not the intended result, it was simple a bad side effect of using mutable objects.</p>\r\n<pre>&lt;?php<br /><br />class AutoBodyShop {<br />&nbsp;&nbsp;&nbsp;public function __construct($car) { ... }<br />}<br /><br />class Car {<br />&nbsp;&nbsp;&nbsp;public function setMake($value) { ... }<br />}<br /><br />$car = new Car();<br />$car-&gt;setMake(&lsquo;BMW&rsquo;);<br />$autoShopOne = new AutoBodyShop($car);<br />$car-&gt;setMake(&lsquo;Mercedes&rsquo;);<br />$autoShopTwo = new AutoBodyShop($car);</pre>\r\n<h3>Simpler to test</h3>\r\n<p>Going hand in hand with better encapsulation is code that is simpler to test. The benefits of testable code are obvious and lead to a more robust and error free code base. When your code is designed in a way that lead to less side effects, there are less confusing code paths to track down.</p>\r\n<h3>More readable and maintainable code</h3>\r\n<p>Any piece of code working against an immutable object does not need to be concerned with affecting other areas of your code using that object. This means there are less intermingled and moving parts in your code. Therefore, your code will be cleaner and easier to understand.</p>\r\n<p>In conclusion, making use of immutability has clear benefits. If done correctly it can lead to more understandable and testable code which are large wins in any codebase. Depending on the language you are using these benefits may be larger than others. In multi-threaded programs for instance immutability will leave much less room for confusion and side effects in your code. However, regardless of the language you&rsquo;re sure to get some advantages from this functionality.</p>","summary":"You might be surprised to find that removing the ability to alter an object can lead to more straightforward and easier to understand code.","seo_title":"5 things you should know about immutable objects","meta_description":"You might be surprised to find that removing the ability to alter an object can lead to more straightforward and easier to understand code.","status":"published"},{"url":"https://buttercms.com/blog/webhook-vs-api-whats-the-difference","created":"2017-06-23T16:28:46.660146Z","published":"2017-06-23T16:28:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://d2wzhk7xhrnk1x.cloudfront.net/Mr5IEWNtReauqFVYop2Y_uber.png","slug":"webhook-vs-api-whats-the-difference","title":"Webhook vs API: What’s the Difference?","body":"<p><span style=\"font-weight: 400;\">Communication is a key driver in the digital era. As humans, we want technology to help us communicate faster, easier and with more people. But in order for that to happen, we had to first find a way to make technologies talk to each other.</span></p>\r\n<p><span style=\"font-weight: 400;\">That&rsquo;s where APIs and webhooks come into play.</span></p>\r\n<p><span style=\"font-weight: 400;\">Both webhooks and APIs facilitate syncing and relaying data between two applications. However, both have different means of doing so, and thus serve slightly different purposes.</span></p>\r\n<p><span style=\"font-weight: 400;\">To clear up any confusion between the two, let&rsquo;s take a look at the differences a webhook and an API, and what kind of scenario each one is most appropriate for. </span></p>\r\n<h2><strong>Webhook vs API: The Differences In Simple Terms</strong></h2>\r\n<p><span style=\"font-weight: 400;\">To put it simply, an API does stuff when you ask it to, while a Webhook does stuff on it's own when certain criteria is met or scenarios takes place. Let&rsquo;s dig a little deeper.</span></p>\r\n<p><span style=\"font-weight: 400;\">An API can used from a server to communicate with example.com. Through that communication, the API can List, Create, Edit or Delete items. The API needs to be given instructions, though. </span></p>\r\n<p><span style=\"font-weight: 400;\">Webhooks on the other hand are automated calls from example.com to a server. Those calls are triggered when a specific event happens on example.com. For example, if a new user signs up on example.com, the automated call may be configured to ask the server to send out a welcome email. </span></p>\r\n<h2><strong>What is a Webhook?</strong></h2>\r\n<p><span style=\"font-weight: 400;\">Sometimes webhooks are referred to as a reverse API, but this isn&rsquo;t entirely true. They don&rsquo;t run backwards, but instead there doesn&rsquo;t need to be a request initiated on your end, data is sent whenever there&rsquo;s new data available.</span></p>\r\n<p><span style=\"font-weight: 400;\">To setup a webhook all you have to do is register a URL with the company proving the service you&rsquo;re requesting data from. That URL will accept data and can activate a workflow to turn the data into something useful. In most cases you can even specify the situations in which your provider will deliver you the data. </span></p>\r\n<p><span style=\"font-weight: 400;\">Webhooks and APIs differ in how they make requests. For instance, APIs will place calls for data whether there&rsquo;s been a data update response, or not. While webhooks receive calls through HTTP POSTs only when the external system you&rsquo;re hooked to has a data update. </span></p>\r\n<h2><strong>When to Use a WebHook</strong></h2>\r\n<p><span style=\"font-weight: 400;\">Webhooks are commonly used to perform smaller requests and tasks, however there are situations where a webhook is more appropriate than an entire API.</span></p>\r\n<p><span style=\"font-weight: 400;\">One common scenario is when your app or platform demands real-time updates, but you don&rsquo;t want to waste your resources. In this instance a webhook would be beneficial. </span></p>\r\n<p><span style=\"font-weight: 400;\">Another circumstance to use a webhook over an API would be when the API is very poor, or there isn&rsquo;t an API to begin with. You could create a workaround solution to give you the data your app requires to function.</span></p>\r\n<p><span style=\"font-weight: 400;\">However, there is a word of caution about webhooks. Since they aren&rsquo;t used to regularly request data, and only do so when new data is available, there is a chance you could never learn about new updates if the system goes offline for some reason. You&rsquo;ll also have less control over the total flow of data, as you have to accept the total data amount that&rsquo;s available with the given update. </span></p>\r\n<h2><strong>Real-Life Webhook Examples</strong></h2>\r\n<p><span style=\"font-weight: 400;\">Many apps and tools do rely on webhooks, but primarily for smaller data requests rather than using them to form the backbone of their service. Still, there are plenty of examples of webhooks being used effectively.</span></p>\r\n<ol>\r\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">The ButterCMS webhook fires anytime anyone publishes a new blog post or updates content in their CMS.</span></li>\r\n<li style=\"font-weight: 400;\"><a href=\"https://zapier.com/zapbook/webhook/\"><span style=\"font-weight: 400;\">Zapier is essentially one giant webhook</span></a><span style=\"font-weight: 400;\">. You link up certain apps together and whenever an event occurs in one it triggers an action in the other.</span></li>\r\n<li style=\"font-weight: 400;\"><a href=\"https://stripe.com/docs/webhooks\"><span style=\"font-weight: 400;\">Stripe has a webhook</span></a><span style=\"font-weight: 400;\"> that will automatically send an email to a customer whenever a subscription payment fails to go through. </span></li>\r\n</ol>\r\n<h2><strong>What is an API?</strong></h2>\r\n<p><span style=\"font-weight: 400;\">API stands for Application Programming Interface. An API is a way for applications and platforms to connect with other applications and platforms via a common communication method. For an API to work there&rsquo;s a request for data, followed by a response to that request. The data is usually delivered in a format like JSON. </span></p>\r\n<p><span style=\"font-weight: 400;\">APIs tend to be the framework that a lot of existing software and tools rely upon. For example, an application that creates Twitter trend reports could rely upon an API to continually get the freshest data right from Twitter. Most large apps have multiple APIs they integrate with the expand their service offerings, as you&rsquo;ll see below.</span></p>\r\n<h2><strong>When to Use an API</strong></h2>\r\n<p><span style=\"font-weight: 400;\">APIs work incredibly well when you know you&rsquo;re going to have a constant change in data. There&rsquo;s no point in using an API if the data you&rsquo;re requiring is going to be relatively stagnate. For example, if you&rsquo;re an eCommerce store that regularly has to update its shipping and tracking data, then you&rsquo;re going to be making constant requests.</span></p>\r\n<p><span style=\"font-weight: 400;\">Every time you poll the API you&rsquo;re going to have new data. If your data isn&rsquo;t constantly updated, then there&rsquo;s no guarantee there&rsquo;s going to be data ready for you at the other end. When this happens you&rsquo;re simply wasting resources. However, if you&rsquo;re set on using an API you can impose a call limit, which will limit the number of calls you make in a set time period. Some apps even limit the number of calls you make from the get go in order to reduce resource use on their end. </span></p>\r\n<h2><strong>Real-Life API Examples</strong></h2>\r\n<p><span style=\"font-weight: 400;\">Like we mentioned above, APIs are everywhere. According to </span><a href=\"https://www.programmableweb.com/about\"><span style=\"font-weight: 400;\">the latest results from ProgrammableWeb</span></a><span style=\"font-weight: 400;\"> there are currently over 17,000 existing APIs. Below you&rsquo;ll find a few tools that employ the use of APIs for their tools to function:</span></p>\r\n<ol>\r\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">As an </span><a href=\"https://www.programmableweb.com/api/buttercms\"><span style=\"font-weight: 400;\">API-first CMS</span></a><span style=\"font-weight: 400;\">, ButterCMS has its own REST API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors &mdash; the capabilities of which are demonstrated by this </span><a href=\"https://www.programmableweb.com/news/build-react-universal-blog-nextjs-and-buttercms/how-to/2017/05/02\"><span style=\"font-weight: 400;\">React Universal Blog build</span></a><span style=\"font-weight: 400;\">. </span></li>\r\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Uber also relies on the Google Maps API, Twilio API, Braintree API, and the SendGrid API to help power their app. </span></li>\r\n<li style=\"font-weight: 400;\"><a href=\"https://api.slack.com/\"><span style=\"font-weight: 400;\">Slack has an API</span></a><span style=\"font-weight: 400;\"> that enables you to integrate their messaging features into your third party apps.</span></li>\r\n</ol>\r\n<h2><strong>Webhooks and APIs Run In Different Circles</strong></h2>\r\n<p><span style=\"font-weight: 400;\">It&rsquo;s not a case of which is better, because there isn&rsquo;t a blanket circumstance where one method trumps the other. It&rsquo;s more of a question regarding the purposes of your application and the kind of data you&rsquo;re requesting. </span></p>\r\n<p><span style=\"font-weight: 400;\">To use an example, you can think of an API as a text message you send to a friend to get more information about an event they&rsquo;re hosting. You ask a question, they send a response.</span></p>\r\n<p><span style=\"font-weight: 400;\">With a webhook, You tell your friend once to text you whenever they&rsquo;re organizing another event, just to let you know. You put in the initial request, and they continually send you updates when new information arises.</span></p>\r\n<p><span style=\"font-weight: 400;\">In the end, most applications end up using both APIs and webhooks together to create a system that can communicate the right types of data at the right times. </span></p>\r\n<p><span style=\"font-weight: 400;\">-</span></p>\r\n<p><em><span style=\"font-weight: 400;\">Image via </span></em><a href=\"https://www.pexels.com/photo/uber-smartphone-iphone-app-34239/\"><em><span style=\"font-weight: 400;\">Pexels</span></em></a></p>","summary":"Communication is a key driver in the digital era. As humans, we want technology to help us communicate faster, easier and with more people. But in order for that to happen, we had to first find a way to make technologies talk to each other. That’s where APIs and webhooks come in.","seo_title":"Webhook vs API: What’s the Difference?","meta_description":"Both webhooks and APIs facilitate syncing and relaying data between two applications.  We look at how they compare.","status":"published"},{"url":"https://buttercms.com/blog/options-for-adding-a-blog-to-an-existing-dot-net-web-app","created":"2017-06-14T15:29:24.793824Z","published":"2017-06-14T00:00:00Z","author":{"first_name":"Ross","last_name":"Tollefson","email":"roger+ross@buttercms.com","slug":"ross-tollefson","bio":"Ross is the owner and sole proprietor of Past9 Systems.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"buttercms","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/jy9hP2PtRi6a9VwjJxmM_ross.png"},"categories":[],"tags":[],"featured_image":"https://d2wzhk7xhrnk1x.cloudfront.net/OBGQ5YwQdetPTBq1oRra_ASP-NET.png","slug":"options-for-adding-a-blog-to-an-existing-dot-net-web-app","title":"Options for Adding a Blog to an Existing .NET Web App","body":"<p>What do you do if you have an existing website or application and there&rsquo;s a sudden requirement for advanced content management features like blogging? Tear it apart and rebuild it on a blogging platform like WordPress? Roll your own blog as an integral part of the existing site? Both of these solutions are quite a lot of work. Rebuilding an application around a specific platform is not a trivial exercise, and your application will be forever coupled to it. And building your own blogging system seems wasteful given that blogging is a problem that&rsquo;s been solved many times over.</p>\r\n<p>Ideally, you could take an existing blog platform and integrate it into your website with minimal changes to what you already have. To find a platform that fits this bill, we need to start with a checklist of basic requirements. Here are some things we need:</p>\r\n<ul>\r\n<li><strong>Separation of concerns:</strong> Say we have a web application with existing business logic that has nothing to do with blogging. We don&rsquo;t want to add blogging functionality to the application itself&mdash;we want to keep its implementation separate, but seamlessly integrated from the user&rsquo;s perspective.</li>\r\n<li><strong>Minimal developer effort:</strong> We don&rsquo;t want to have to maintain separate versions of our view templates just to get the same look and feel across both application and blog pages.</li>\r\n<li><strong>Common blogging features:</strong> We might as well define what we mean by a blog&mdash;we need the ability to create blog posts and single pages, deal with multiple authors, and have a publishing workflow.</li>\r\n</ul>\r\n<p>While we&rsquo;re at it, we should also consider things that would be &ldquo;nice to have&rdquo;:</p>\r\n<ul>\r\n<li><strong>Granularity</strong>: It would be nice to be able to drive specific pieces of a page with the blog, rather than having an all-or-nothing approach where certain pages are controlled entirely by the blog and others must exist completely without its support. For example, we might have an existing app that has a landing/login page. It would be nice if we could display a list of recent posts in a sidebar without having to turn over control of the entire page to the blog platform.</li>\r\n<li><strong>Language agnostic</strong>: We&rsquo;d prefer a one-size-fits-all solution&mdash;one where we don&rsquo;t have to worry about maintaining two separate runtimes if the CMS happens to be written in a different language than our existing application.</li>\r\n<li><strong>Hosted</strong>: It would be ideal if we could avoid supporting the implementation of the blog altogether. If we truly want to keep it separate from our existing app, we&rsquo;ll probably end up maintaining two separate bodies of code and two separate databases. A best-case scenario would be one where we could use a hosted solution but show the content and pages as if they were part of our own website. This would potentially also free us from having to worry about the multiple runtimes issue mentioned above.</li>\r\n</ul>\r\n<p>For the purposes of our example, let&rsquo;s say we have an existing web application written in .NET. What blogging platform would meet our requirements?</p>\r\n<h2>WordPress</h2>\r\n<p>It&rsquo;s only natural to give serious consideration to WordPress, given its popularity and excellent community support. It certainly has the features we need for creating pages and blog posts. However, we quickly run into problems beyond that.</p>\r\n<p>There are hosted instances of WordPress available, but it&rsquo;s not obvious how we could smoothly integrate these into an existing site. If our site is at <code>example.com</code>, we could point <code>blog.example.com</code> to our hosted WordPress, but what if we don&rsquo;t want to do that? That solution lacks flexibility. It also means we can forget about granularity.</p>\r\n<p>If we want our blog to reside at <code>example.com/blog</code>, we would need to host it ourselves and route certain pages to WordPress. Again, this lacks granularity. There&rsquo;s no easy way to pull a list of recent post titles from WordPress and plug it into, say, the Razor templates that our .NET app would likely be using. It also means we have to maintain our own WordPress code, database, and PHP runtime, as well as separate versions of our view templates written for WordPress/PHP.</p>\r\n<h2>DotNetNuke / SiteFinity</h2>\r\n<p>DotNetNuke is a popular .NET CMS that supports blogging through plugin modules. Using DNN or another .NET CMS like SiteFinity would immediately ease the problem of having to maintain separate technology stacks&mdash;but only because our example web application happens to be written in .NET. This is hardly a universal solution.</p>\r\n<p>We also still need to maintain a separate database or include the CMS database tables in our existing schema.</p>\r\n<h2>Roll Your Own</h2>\r\n<p>It&rsquo;s starting to feel like rolling our own blog platform, while a poor solution, is just as good as those previously mentioned. We could make it as granular as we wanted, pulling individual content fields or entire pages into our existing templates at will. And maybe we could architect our code in such a way as to cleanly separate the blog code from the existing application. But this is still a huge amount of effort and expense.</p>\r\n<p>When thinking about building our own blog, it becomes apparent that what we really need is a blogging <em>engine</em>. We need the logic and administrative UI to manage content, but without the front end&mdash;it should be utterly unopinionated about routing, templating, and rendering pages. This would give us the tools to deal with content while giving us the flexibility to display and integrate it however we see fit.</p>\r\n<h2>Headless Content Management</h2>\r\n<p>Another word for a &ldquo;blogging engine&rdquo; the way we&rsquo;ve envisioned it might be a <em>headless blog</em> or <em>headless CMS</em>. This is a CMS that has a backend but no frontend. Content is fetched through the engine&rsquo;s API, but displaying it to the user is left entirely up to a developer. This is an architecture that has actually become popular recently due to its flexibility and unintrusive integration.</p>\r\n<p>One such platform is <a href=\"../\">ButterCMS</a>. It&rsquo;s a hosted solution with an administrative dashboard for editing blog posts, handling authoring workflows, internationalization, and more. The content created through this backend is exposed through a REST API that&rsquo;s accessible through various client libraries written in multiple languages (including C#/.NET).</p>\r\n<p>This might work. Let&rsquo;s look at our requirements and see if it does what we need:</p>\r\n<ul>\r\n<li><strong>Separation of concerns:</strong> Because ButterCMS is hosted, the code, database, and maintenance are handled entirely by ButterCMS.</li>\r\n<li><strong>Minimal developer effort:</strong> Content is fetched by calling the REST API using string keys to identify pages and blog posts. In most cases, displaying a page is as simple as asking the API for the raw HTML content, placing it in a view template, and rendering it.</li>\r\n<li><strong>Common CMS features:</strong> Blog posts, custom pages, multiple authors, and publishing workflows are all supported.</li>\r\n<li><strong>Granularity:</strong> ButterCMS allows the creation of multiple types of content from entire pages to text fields to simple object and array structures.</li>\r\n<li><strong>Language agnostic:</strong> Official Ruby, JavaScript, Python, PHP, and .NET clients currently exist.</li>\r\n<li><strong>Hosted:</strong> ButterCMS is an entirely hosted solution. All you need is an account, an API key, and a client for your chosen language.</li>\r\n</ul>\r\n<p>Fetching content through an API client and rendering it certainly sounds simple enough, but let&rsquo;s try it out to make sure. We&rsquo;ll implement a simple <a href=\"http://ASP.NET\">ASP.NET</a> MVC controller in C# to render the appropriate blog post for a route.</p>\r\n<p>Before we do that, we need a ButterCMS account. Once we&rsquo;ve signed up and logged in, we can click on our name in the top-left corner of the dashboard. In the dropdown menu that appears, click &ldquo;Settings&rdquo; and go the the API tab. This will show our API Token. We need to pass this token to our API client, which passes it the the ButterCMS API on each request to identify us.</p>\r\n<p>We also need some blog posts to render. Click &ldquo;New Post&rdquo; on the left sidebar menu. Write &ldquo;My First Test Post&rdquo; for the title and add some content (doesn&rsquo;t matter what, we just need something to render), then click the &ldquo;Publish&rdquo; button at the top. Then do the same thing to add another post, but title it &ldquo;My Second Test Post&rdquo;.</p>\r\n<p>Each of these posts has a unique human-readable identifier called a &ldquo;slug&rdquo;, which is automatically generated from the post title by default. The slugs for the two posts we just created are &ldquo;my-first-test-post&rdquo; and &ldquo;my-second-test-post&rdquo;, respectively. We&rsquo;ll use these in our MVC controller to handle routing to the appropriate post.</p>\r\n<p>In our MVC app, we&rsquo;ll first need to install the <a href=\"https://www.nuget.org/packages/ButterCMS/\">ButterCMS NuGet package</a>. This package contains the client that we&rsquo;ll use to communicate with the API.</p>\r\n<p>After installing the package, let&rsquo;s make a new MVC controller that we&rsquo;ll use to render blog posts:</p>\r\n<pre><code class=\"language-csharp\"><span class=\"hljs-keyword\">using</span> ButterCMS;\r\n<span class=\"hljs-keyword\">using</span> System.Threading.Tasks;\r\n<span class=\"hljs-keyword\">using</span> System.Web.Mvc;\r\n<span class=\"hljs-keyword\">using</span> System.Net;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">MyApp.Controllers</span> \r\n{\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlogController</span> : <span class=\"hljs-title\">Controller</span> \r\n  {\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">string</span> _apiToken = <span class=\"hljs-string\">\"{your_api_token}\"</span>;\r\n\r\n    <span class=\"hljs-keyword\">private</span> ButterCmsClient _client;\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BlogController</span>() \r\n    </span>{\r\n      _client = <span class=\"hljs-keyword\">new</span> ButterCMSClient(_apiToken);\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n<p>This creates a new ButterCMS client that&rsquo;s configured to fetch content from the ButterCMS account we just created. Now let&rsquo;s create a simple route and fetch our post.</p>\r\n<pre><code class=\"language-csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlogController</span> : <span class=\"hljs-title\">Controller</span> \r\n{\r\n  <span class=\"hljs-comment\"><span class=\"hljs-xmlDocTag\">///</span> ...</span>\r\n\r\n  [Route(<span class=\"hljs-string\">\"blog/{slug}\"</span>)]\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">async</span> Task&lt;ActionResult&gt; <span class=\"hljs-title\">ShowPost</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> slug</span>) \r\n  </span>{\r\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> Client.RetrievePostAsync(slug);\r\n    ViewBag.Post = response.Data;\r\n    <span class=\"hljs-keyword\">return</span> View(<span class=\"hljs-string\">\"Post\"</span>);\r\n  }\r\n}\r\n</code></pre>\r\n<p>This gets us the content for a blog post based on the slug that we passed in through the URL. So if we start our app and navigate to <code>http://{my_app_host}/blog/my-first-test-post</code>, we&rsquo;ll fetch the content for the first post we wrote.</p>\r\n<p>Obviously this is incomplete&mdash;we haven&rsquo;t yet made a &ldquo;Post&rdquo; view template to render to. Let&rsquo;s do that now:</p>\r\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h2</span>&gt;</span>@ViewBag.Post.Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h2</span>&gt;</span>\r\n\r\n@Html.Raw(ViewBag.Post.Body)\r\n</code></pre>\r\n<p>This simply renders the post&rsquo;s title and body content. We should always use <code>@Html.Raw()</code> to render the post content because ButterCMS uses HTML tags for formatting, either manually or using its built in WYSIWYG editor.</p>\r\n<p>That&rsquo;s it! Pretty simple. The API client has other methods for listing and paginating posts, fetching posts by author or category, etc., but they&rsquo;re all as easy to use as the example above.</p>","summary":"What do you do if you have an existing website or application and there’s a sudden requirement for advanced content management features like blogging? Tear it apart and rebuild it on a blogging platform like WordPress? Roll your own? Here's your options.","seo_title":"Options for Adding a Blog to an Existing .NET Web App","meta_description":"What do you do if you have an existing website and there’s a requirement for a blog? WordPress? Roll your own? Here's your options.","status":"published"},{"url":"https://buttercms.com/blog/developer-salary-showdown-tech-companies-vs-agencies","created":"2017-06-13T21:04:18.829229Z","published":"2017-06-13T21:04:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://d2wzhk7xhrnk1x.cloudfront.net/8GA8ckQ7QFOX9z1MOonA_dev.png","slug":"developer-salary-showdown-tech-companies-vs-agencies","title":"Developer Salary Showdown: Tech Companies vs Agencies","body":"<p>The digital revolution is showing no sign of slowing down, which is great news for developers. The only real question is, where should a contemporary developer choose to work?</p>\r\n<p>Now that <a href=\"https://app.intercom.io/a/apps/bp1btbv7/respond/inbox/all/conversations/10292523063\" target=\"_blank\" rel=\"noopener noreferrer\">35 percent of the US workforce is freelance</a>, the numbers reveal that carving out your own path is becoming the norm. But if you&rsquo;re determined to leave your mark on the digital world as part of a large brand, you&rsquo;re left with two options: a leading tech company or a leading agency.</p>\r\n<p>But before we crunch the numbers, let&rsquo;s take a look at the benefits of each.</p>\r\n<h2>What Developers Really Want</h2>\r\n<p>A good developer doesn&rsquo;t code just for the money. A good developer wants to make an impact. Software builder <a href=\"http://www.softwarebyrob.com/2006/10/31/nine-things-developers-want-more-than-money/\" target=\"_blank\" rel=\"noopener noreferrer\">Rob Walling</a> did a great job of listing what developers want in a job, for their career and desired lifestyle. Inspired by his list, here are some especially relevant concerns for software developers:&nbsp;</p>\r\n<ul>\r\n<li>Being in an environment that promotes individual to success</li>\r\n<li>Having excellent management to pathe the way for projects</li>\r\n<li>Learning new things and exercising creativity</li>\r\n<li>Building something that matters</li>\r\n<li>Not having to get approval for every micro-step</li>\r\n<li>Having few legacy constraints</li>\r\n</ul>\r\n<p>Interestingly, <a href=\"https://www.inc.com/adam-vaccaro/why-software-engineers-quit.html\" target=\"_blank\" rel=\"noopener noreferrer\">Inc&rsquo;s research</a> suggests, while compensation is the most common reason for software engineers to quit, they would accept a lower salary to work in a great culture and for a great brand.</p>\r\n<p>The book <a href=\"http://www.danpink.com/books/drive/\" target=\"_blank\" rel=\"noopener noreferrer\">Drive</a> by Daniel Pink famously describes employee motivations. On top of money, people are motivated by autonomy, mastery, and purpose. In short, when the bills are covered, you become more interested in perks without a price tag.&nbsp;</p>\r\n<p>Having said all that, everybody has their own unique wants and needs, so without any further ado, let&rsquo;s get into the comparison between top technology companies and top agencies.</p>\r\n<h1>Working for Leading Tech Brands: Salaries and Perks</h1>\r\n<p>Going into 2017, here&rsquo;s what <a href=\"https://docs.google.com/spreadsheets/d/1Km9bsx0SWPDiOPMYvremSDujyS5sF0ZQvbxr5S52wSA/edit#gid=1649958221\" target=\"_blank\" rel=\"noopener noreferrer\">interns and new graduates can expect from Silicon Valley</a>:</p>\r\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\r\n<p dir=\"ltr\" lang=\"en\">New Grad and Intern tech offers for 2017 💰💰💰 <a href=\"https://twitter.com/hashtag/SiliconValley?src=hash\">#SiliconValley</a> <br />Data here: <a href=\"https://t.co/DY1wXqw73g\">https://t.co/DY1wXqw73g</a> <a href=\"https://t.co/a6ljAkiyzo\">pic.twitter.com/a6ljAkiyzo</a></p>\r\n&mdash; Jesse Collins (@jtc_au) <a href=\"https://twitter.com/jtc_au/status/804696875815288836\">December 2, 2016</a></blockquote>\r\n<script src=\"//platform.twitter.com/widgets.js\"></script>\r\n<p>Pretty generous, right? But let&rsquo;s dig a little deeper.</p>\r\n<h2>Google</h2>\r\n<p>Working for Google is the dream of many software developers.</p>\r\n<p>At the time of writing, $112,672 is the <a href=\"https://www.glassdoor.com/Salary/Google-Web-Developer-Salaries-E9079_D_KO7,20.htm\" target=\"_blank\" rel=\"noopener noreferrer\">typical Google Web Developer</a> salary per year, while salaries across the board at Google can range from $64,143 to $152,669.</p>\r\n<p>Now, Google is a company that can offer its employees incredible perks outside of the base salary &mdash; and that&rsquo;s exactly what they do. From sleeping pods to the famous Googleplex headquarters, a gig with them comes with extraordinary benefits.</p>\r\n<p>Here are some <a href=\"https://careers.google.com/how-we-care-for-googlers/\" target=\"_blank\" rel=\"noopener noreferrer\">perks that they publish</a>:</p>\r\n<ul>\r\n<li>Generous parental leave policies, retirement savings plans and death benefits</li>\r\n<li>Onsite fitness, wellness and healthcare services</li>\r\n<li>Google matches all charitable donations and adds donations for hours their employees rack up as volunteers</li>\r\n<li>Flexible working hours and vacation time</li>\r\n<li>In some Google offices, you can even bring your dog to work&nbsp;</li>\r\n</ul>\r\n<p>On top of all that, as documented by books like <a href=\"http://www.thesprintbook.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Sprint</a> and <a href=\"https://www.howgoogleworks.net/\" target=\"_blank\" rel=\"noopener noreferrer\">How Google Works</a>, a passionate software engineer will find the work very engaging and rewarding.</p>\r\n<h2>Microsoft</h2>\r\n<p>At the time of writing, the typical <a href=\"https://www.glassdoor.com/Salary/Microsoft-Web-Developer-Salaries-E1651_D_KO10,23.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft Web Developer salary</a> is at $83,609 per annum, although Web Developer salaries can range from $56,000 to $126,347.</p>\r\n<p>They highlight the <a href=\"https://careers.microsoft.com/benefits/usbenefits\" target=\"_blank\" rel=\"noopener noreferrer\">following perks</a>:</p>\r\n<ul>\r\n<li>A wide range of healthcare benefits</li>\r\n<li>Flexible work hours</li>\r\n<li>Microsoft matches all charitable donations made by employees</li>\r\n<li>Onsite fitness centers</li>\r\n<li>Company-wide social clubs</li>\r\n<li>Electric car charging stations&nbsp;</li>\r\n</ul>\r\n<p>Let us also remember that Microsoft now owns Linkedin. Joining LinkedIn specifically would bring you the <a href=\"https://careers.linkedin.com/benefits\" target=\"_blank\" rel=\"noopener noreferrer\">following benefits</a>:</p>\r\n<ul>\r\n<li>Medical insurance for you and your family</li>\r\n<li>Adoption assistance</li>\r\n<li>Access to Lynda.com courses</li>\r\n<li>Pet insurance&nbsp;</li>\r\n</ul>\r\n<h2>Salesforce&nbsp;</h2>\r\n<p>At the time of writing, <a href=\"https://www.glassdoor.com/Salary/Salesforce-Web-Developer-Salaries-E11159_D_KO11,24.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Web Developer salaries at Salesforce</a> can range from $101,023 to $108,668.</p>\r\n<p>Beyond the basic salary, here are additional perks from third party reviews and their <a href=\"http://www.getsalesforcebenefits.com/your-benefits/work-life/perks\" target=\"_blank\" rel=\"noopener noreferrer\">official benefits website</a>:</p>\r\n<ul>\r\n<li>Discounts ranging from fitness and sunglasses</li>\r\n<li>Subsidized public transportation</li>\r\n<li>Education reimbursement</li>\r\n<li>Free food and drink</li>\r\n<li>Onsite package/mailing service</li>\r\n</ul>\r\n<h2>IBM&nbsp;</h2>\r\n<p>$73,097 is the typical salary of a <a href=\"https://www.glassdoor.com/Salary/IBM-Web-Developer-Salaries-E354_D_KO4,17.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Web Developer in IBM</a>. The salaries at IBM can range from $40,640 to $87,847.</p>\r\n<p>IBM employees can also expect to <a href=\"http://www-01.ibm.com/employment/us/benefits/\" target=\"_blank\" rel=\"noopener noreferrer\">benefit for perks such as</a>:</p>\r\n<ul>\r\n<li>A career development program</li>\r\n<li>Leisure time through vacation, personal leave, and holiday plans</li>\r\n<li>Income protection in case of illness</li>\r\n</ul>\r\n<h2>Oracle&nbsp;</h2>\r\n<p>The typical <a href=\"https://www.glassdoor.com/Salary/Oracle-Web-Developer-Salaries-E1737_D_KO7,20.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle Web Developer salary</a> is $65,579. Web Developer salaries at Oracle can range from $54,000 to $78,718.</p>\r\n<p>Here are additional benefits for <a href=\"https://www.oracle.com/corporate/careers/work-at-oracle/benefits.html\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle employees</a>:&nbsp;</p>\r\n<ul>\r\n<li>Employee stock purchase plans</li>\r\n<li>Child care and car insurance</li>\r\n<li>Discounts on travel, entertainment, events and electronics</li>\r\n<li>Group legal services</li>\r\n</ul>\r\n<h1>Working for Leading Agencies: Salaries and Perks</h1>\r\n<p>Because the overwhelming majority of agencies are private companies, it&rsquo;s a little harder to figure out what the average salary is for interns and graduates. However, we dug deep to find the relevant numbers from the world&rsquo;s leading agencies.&nbsp;</p>\r\n<h2>Something Digital</h2>\r\n<p>At Something Digital, you can <a href=\"https://www.payscale.com/research/US/Employer=Something_Digital/Salary\" target=\"_blank\" rel=\"noopener noreferrer\">expect</a> a salary within the range of $60,170 to $119,488 at the time of writing.</p>\r\n<p>They list non-monetary <a href=\"https://www.somethingdigital.com/careers/\" target=\"_blank\" rel=\"noopener noreferrer\">perks</a> as follows:</p>\r\n<ul>\r\n<li>Continuous paid training, certificates and conferences</li>\r\n<li>Free lunch</li>\r\n<li>Open door policy on all levels</li>\r\n<li>Launch celebrations</li>\r\n<li>Team activities</li>\r\n</ul>\r\n<h2>The Nerdery&nbsp;</h2>\r\n<p>The typical <a href=\"https://www.glassdoor.com/Salary/The-Nerdery-Software-Developer-Salaries-E249800_D_KO12,30.htm\" target=\"_blank\" rel=\"noopener noreferrer\">The Nerdery Software Developer</a> salary is $74,727. Software Developer salaries can range from $55,803 to $97,792.</p>\r\n<p>Additional <a href=\"https://www.nerdery.com/mentions/79\" target=\"_blank\" rel=\"noopener noreferrer\">perks include</a>:&nbsp;</p>\r\n<ul>\r\n<li>A breakfast bar</li>\r\n<li>Foosball tables</li>\r\n<li>Video games</li>\r\n<li>Free-flowing caffeine</li>\r\n</ul>\r\n<h2>Siteworx&nbsp;</h2>\r\n<p><a href=\"https://www.glassdoor.com/Salary/Siteworx-Developer-Salaries-E213515_D_KO9,18.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Developer salaries at Siteworx</a> can range from $49,152 to $64,645.</p>\r\n<p>The experience design company <a href=\"http://careers.siteworx.com/\" target=\"_blank\" rel=\"noopener noreferrer\">cites</a> and is <a href=\"https://www.glassdoor.com/Benefits/Siteworx-US-Benefits-EI_IE213515.0,8_IL.9,11_IN1.htm\" target=\"_blank\" rel=\"noopener noreferrer\">known for</a> offering the following perks:</p>\r\n<ul>\r\n<li>401k contributions</li>\r\n<li>Diverse medical plans</li>\r\n<li>Monthly cell phone stipend</li>\r\n<li>Remote working</li>\r\n</ul>\r\n<h2>Faster Solutions</h2>\r\n<p>At the time of writing, Faster Solutions pays its developers <a href=\"https://www.glassdoor.com/Salary/Faster-Solutions-Salaries-E492254.htm\" target=\"_blank\" rel=\"noopener noreferrer\">around $33,907</a> at Faster Solutions.</p>\r\n<p><a href=\"https://www.glassdoor.com/Reviews/Faster-Solutions-Reviews-E492254.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Reviews</a> of the company cites the following perks:</p>\r\n<ul>\r\n<li>Strong internal structure that promotes communication</li>\r\n<li>The chance to work with big clients</li>\r\n<li>Friendly and supportive management</li>\r\n</ul>\r\n<h2>Verndale&nbsp;</h2>\r\n<p>At Verndale, you can <a href=\"http://www.payscale.com/research/US/Employer=Verndale/Salary\" target=\"_blank\" rel=\"noopener noreferrer\">expect</a> a salary between $79,742 to $140,095.</p>\r\n<p>They list the following perks:</p>\r\n<ul>\r\n<li>Company outings</li>\r\n<li>Discounted Zip Car membership</li>\r\n<li>Bi-weekly visits from an ice cream truck during the summer</li>\r\n<li>Catered lunches every Friday from Boston&rsquo;s top restaurants</li>\r\n</ul>\r\n<h1>Over to You&nbsp;</h1>\r\n<p>As the numbers show, no agency will be able to match the salary or perks dished out by the likes of Google. However, they seem to be the exception to the rule, as many of the listed agencies offer competitive salaries when compared to the likes of Microsoft and IBM.</p>\r\n<p>However, a notable perk offered by big tech brands is the stock purchase plan that accompanies the salary. While earnings are not assured, those stocks have the potential to make you quite rich indeed. &nbsp;</p>\r\n<p>A differentiator for agencies would be the type of brands they would work with. You would get to work with ambitious startups and enterprise-grade companies looking to push the boundaries of current technologies. An agency like Siteworx for example <a href=\"http://careers.siteworx.com/\" target=\"_blank\" rel=\"noopener noreferrer\">lists clients</a> ranging from Time Warner to Sears.</p>\r\n<p>On top of project diversity, you may also prefer the fact that most agencies have far fewer employees compared to tech giants, giving your role more purpose, and making the community feel more accessible.</p>\r\n<p>In the end, both avenues have their perks. Some are monetary, while others are cultural. It&rsquo;s down to you to decide which option best suits your world view.</p>","summary":"The digital revolution is showing no sign of slowing down, which is great news for developers. The only real question is, where should a contemporary developer choose to work? Now that 35 percent of the US workforce is freelance , the numbers reveal that carving out your own path is ...","seo_title":"Developer Salary Showdown: Tech Companies vs Agencies","meta_description":"As the numbers show, no agency will be able to match the salary dished out by the likes of Google. However, they seem to be the exception.","status":"published"},{"url":"https://buttercms.com/blog/8-ways-to-land-more-clients-as-a-freelance-developer","created":"2017-06-13T19:12:43.016159Z","published":"2017-06-13T19:12:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://d2wzhk7xhrnk1x.cloudfront.net/x78F1QHBRHuQrMNTvK7i_pexels-photo-52608.jpg","slug":"8-ways-to-land-more-clients-as-a-freelance-developer","title":"8 Ways to Land More Clients as a Freelance Developer","body":"<p id=\"h.eh0412qxghg0\">As a freelance developer, you&rsquo;re constantly looking for ways to keep your client pipeline flowing.</p>\r\n<p>But as coding becomes a more common skill, the number of competitors who can seemingly undercut you at every turn is rising. However, that doesn&rsquo;t mean there aren&rsquo;t enough clients to go around, nor does it mean you aren&rsquo;t talented&nbsp;enough to stand out from the crowd.</p>\r\n<p>To help you do exactly that, we have listed eight ways any freelance developer can enhance their reputation and drum up new business.</p>\r\n<h1>The Art of Finding Clients</h1>\r\n<p>As a developer your job is to solve problems. You&rsquo;re not just selling websites, plugins or apps &mdash; you&rsquo;re helping a client achieve a specific and tangible goal.</p>\r\n<p>To attract the right kind of clients, that mentality of providing value rather than a soulless service needs to surround your work and personal brand. &nbsp;</p>\r\n<p>With that in mind, let&rsquo;s take a look at how you can apply that mentality to reality.</p>\r\n<h3>1. Contribute to Open Source Projects</h3>\r\n<p>Being a professional developer takes more than just calling yourself one. Getting involved in open source projects is a great way to cement your reputation as a developer with a purpose.</p>\r\n<p>There are hundreds of open source projects where you can showcase your work, while contributing value to a cause you believe in. Depending upon the kind of work you do your clients might not see the value in your GitHub commits, but for higher-level projects your contributions are a necessity. Plus, being active with certain open source projects can help you build valuable connections with other freelancers and project leaders in your space.</p>\r\n<p>If you don&rsquo;t have any open source tools you use regularly and would like to contribute to, then consider <span style=\"text-decoration: underline; color: #15c;\"><a href=\"https://github.com/explore\">exploring Github</a></span>&nbsp;until you find something that catches your eye.&nbsp;</p>\r\n<p>Beyond open source, you can even consider creating programming specific tutorials for sites like <span style=\"text-decoration: underline; color: #15c;\"><a href=\"https://www.sitepoint.com/\">SitePoint</a></span>&nbsp;to further show your mastery of a given domain.</p>\r\n<h3>2. Work For Free (For Now)</h3>\r\n<p>Most freelancers balk at doing free work. It can indeed be a difficult pill to swallow, but the benefits can be immense, especially if you&rsquo;re just getting started.</p>\r\n<p>If there&rsquo;s a dream client you really want to work with and you know you can provide something valuable to them, then create a portion of your project for free. Then reach out to them.</p>\r\n<p>For example, if you know a site is due for a redesign, you could create the homepage for the site and send them an email with the link, &ldquo;I had this in mind for a redesign of your website, if you like it, feel free to use it.&rdquo;</p>\r\n<p>Even if they&rsquo;re not currently in the market for a redesign you&rsquo;ll be on their mind if and when they are. Plus, if they decide to use your free work without anything more from you, it&rsquo;s a nice piece you can add to your portfolio.</p>\r\n<p>You can even use free work in exchange for referral leads in your chosen niche. For example, you could build a website for a non-profit in exchange for referrals from their network upon completion.</p>\r\n<h3>3. Go Niche</h3>\r\n<p>By going after a very specific market, or by specializing in a particular language or technology, you immediately decrease the amount of competition for new work &mdash; and at the same time, you can work on mastering that one dimension of your craft, which gives you a reason to charge more.</p>\r\n<p>This is especially true if you&rsquo;re in a competitive space like WordPress development. If you are in a space like WordPress, then niche down by being a WordPress developer for tech startups, or a Genesis child theme developer.</p>\r\n<p>You can even choose to drill down into trending technologies like <span style=\"text-decoration: underline; color: #15c;\"><a href=\"../\">headless CMS</a></span>, or <span style=\"text-decoration: underline; color: #15c;\"><a href=\"https://swift.org/documentation/\">Apple&rsquo;s new Swift programming language</a></span><span style=\"font-size: 11pt; font-weight: 400; font-style: normal; text-decoration: none; color: #000;\">. </span></p>\r\n<h3>4. Create a Referral Engine</h3>\r\n<p>If you have any previous (and satisfied) clients, they can be great sources of new work for you. Whenever you complete a new project for a client you should have a follow-up sequence. &nbsp;</p>\r\n<p>Something as simple as, &ldquo;I really enjoyed working on this past project with you. If you know of anyone else you could refer me to, it would be much appreciated.&rdquo;</p>\r\n<p>A lot of business are built on the back of referrals. In fact, <span style=\"text-decoration: underline; color: #15c;\"><a href=\"https://influitive.com/blog/infographic-17-stats-about-b2b-referrals-you-should-know-but-probably-dont/\">a recent study from Heinz Marketing</a></span>&nbsp;found that, &ldquo;84% of B2B decision makers start the buying process with a referral.&rdquo;</p>\r\n<h3>5. Use the &ldquo;Be Everywhere&rdquo; Approach</h3>\r\n<p>If you want potential clients to find you online before they find your closest competitors, be everywhere.&nbsp;</p>\r\n<p>That means getting your personal brand or agency a website, a Facebook page, Twitter, Instagram, Snapchat and everything else in between.</p>\r\n<p>Aside from being easier to find, in today&rsquo;s day and age, every potential client will want to do their due diligence before hiring you. If you have a sparse or non-existent online presence, this this won&rsquo;t do you any favors. &nbsp;</p>\r\n<p>It&rsquo;s most effective to have a social media presence on the platforms your ideal clients hang out. For example, if you&rsquo;re primarily dealing with startup founders and business managers, then make sure your <span style=\"text-decoration: underline; color: #15c;\"><a href=\"https://www.linkedin.com/\">LinkedIn</a></span>&nbsp;and <span style=\"text-decoration: underline; color: #15c;\"><a href=\"https://angel.co/\">Angel.co</a></span>&nbsp;profiles are up to date.</p>\r\n<h3>6. Befriend Fellow Freelancers</h3>\r\n<p>Maybe it&rsquo;s time to stop seeing other freelancers as your competition, and start seeing them as your community.</p>\r\n<p>It can be helpful to build a rapport first by sharing their work on social media, or by commenting on their blog. Once they know you exist, let them know you&rsquo;re available to help if they&rsquo;re too busy and need to delegate work to someone capable.&nbsp;</p>\r\n<p>The best way to form a stable business relationship is to offer value. Instead of trying to get something from them, offer to help them for free if necessary if you think they&rsquo;ll have more work for you in the long run.</p>\r\n<p>If you prefer to build those bonds in person, it&rsquo;s very likely that your local city is home to networking events and relevant conferences where you you can meet like-minded freelancers.</p>\r\n<p>Also, be sure to connect with other freelancers and businesses that offer products and services that complement yours. For example, a graphic designer might have clients who also need web development work. Instead of turning that work down, they can refer it to you.</p>\r\n<h3>7. Browse Through Select Job Boards</h3>\r\n<p>A lot of job boards are filled with low-paying job postings and a high level of competition. Most of them should be avoided, but not all. Most job boards, like Freelancer and Upwork are packed with thousands of other freelancers bidding on the same job, this level of competition tends to reduce prices.&nbsp;</p>\r\n<p>However, there are other job boards that are oriented towards development specialities. Since these job boards are much more exclusive, you&rsquo;ll typically find high quality clients seeking high quality freelancers.</p>\r\n<p>Here are some job boards for freelance developers that we recommend:</p>\r\n<ul>\r\n<li><a href=\"https://weworkremotely.com/\">We Work Remotely</a></li>\r\n<li><a href=\"http://www.authenticjobs.com/\">Authentic Jobs</a></li>\r\n<li><a href=\"http://99u.com/joblist\">99u Freelance Jobs</a></li>\r\n<li><a href=\"http://onsite.io/\">OnSite</a></li>\r\n<li><a href=\"http://jobs.smashingmagazine.com/\">Smashing Jobs</a></li>\r\n<li><a href=\"https://coworks.com/freelancers\">Coworks</a></li>\r\n<li><a href=\"http://gun.io/\">Gun.io</a></li>\r\n<li><a href=\"http://www.krop.com/\">Krop</a></li>\r\n<li><a href=\"https://codeable.io/\">Codeable.io</a></li>\r\n</ul>\r\n<h3>8. Produce Content at Scale</h3>\r\n<p>Content marketing can be an incredible way to get new leads for your freelance business.</p>\r\n<p>Blogging on your own website and sharing it across channels is the best way to start, particularly because <span style=\"text-decoration: underline; color: #15c;\"><a href=\"http://www.stateofinbound.com/\">82 percent of marketers who blog report positive ROI</a></span><span style=\"font-size: 11pt; font-weight: 400; font-style: normal; text-decoration: none; color: #000;\">&nbsp;</span>from their marketing efforts. However, as a freelancer trying to stand out from the ever-growing crowd, you need to go the extra mile and produce content in various ways to master that &ldquo;be everywhere&rdquo; approach and spread your valuable advice further and wider.</p>\r\n<p>Here are a few ways to produce your content at scale:</p>\r\n<ul>\r\n<li>Guest post on relevant blogs and websites</li>\r\n<li>Dish out advice to other developers and potential clients on YouTube and Instagram</li>\r\n<li>Respond to relevant <a href=\"https://www.quora.com/\">Quora</a>&nbsp;questions with detailed answers</li>\r\n</ul>\r\n<h1>Bring The Value</h1>\r\n<p>Getting a steady supply of high-quality clients takes time, but that&rsquo;s not to imply that you should be waiting around for them to find you. Bring value to the developer community, and you&rsquo;ll find that it usually gives back.</p>\r\n<p>Got any tips on how to find work as a freelance developer? Share them with us in the comments below!</p>","summary":"As a freelance developer, you’re constantly looking for ways to keep your client pipeline flowing. But as coding becomes a more common skill, the number of competitors who can seemingly undercut you at every turn is rising.","seo_title":"8 Ways to Land More Clients as a Freelance Developer","meta_description":"As a freelance developer, you’re constantly looking for ways to keep your client pipeline flowing.  Here's our 8 tips to help!","status":"published"},{"url":"https://buttercms.com/blog/headless-cms-buyers-guide","created":"2017-06-09T07:43:45.805867Z","published":"2017-06-09T07:43:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://d2wzhk7xhrnk1x.cloudfront.net/MBNQlJbCTjy3kyaVUUGg_headless-cms-buyers-guide.jpg","slug":"headless-cms-buyers-guide","title":"Headless CMS Buyers Guide","body":"<h2><strong>What is a headless CMS?</strong></h2>\r\n<p><em>If you know what a headless CMS is, skip this section.</em></p>\r\n<p>The typical way of building a CMS-powered website is to choose a fully-integrated solution like <a href=\"https://wordpress.org\">WordPress</a> and build your website as a collection of tightly embedded templates. Or if you want more control, you build your own integrated CMS using your preferred tech stack.</p>\r\n<p>Headless CMS solutions like <a href=\"../\">ButterCMS</a> are a relatively new approach to content management with many advantages over the \"old\" way. Headless CMS's allow you to build websites and apps that are decoupled from their content management tools and integrated via API. This gives you the flexibility to build your front-end using your preferred tools (eg. Rails, Node.js, Angular) while being able to integrate a customized, robust CMS with ease. A headless approach can save your team significant time and money in the initial implementation as well as ongoing maintenance.</p>\r\n<h2><strong>Navigating the choices</strong></h2>\r\n<p>So you've decided that a headless CMS is right for you, so you pull up Google and start exploring the options. You find dozens of different CMS's selling the API-based approach and offering all kinds of features and add-ons. You come across SaaS options charging upwards of a $1000/mo, abandoned open-source Github projects, and confusing terms like \"content objects\". You also find articles about WordPress's API, and using Drupal with separate front-ends.&nbsp;</p>\r\n<p>How do you begin to make sense out of all this? I've created this guide to help.</p>\r\n<h2><strong>Breaking down the categories</strong></h2>\r\n<p>Headless&nbsp;CMS's are a confusing beast. Some new products call themselves \"API-first\", whereas many others have evolved to offer an API-based approach.</p>\r\n<p>For example, WordPress recently rolled out a REST API and maintains some client libraries, such as <a href=\"http://wp-api.org/node-wpapi/\">node-wpapi</a>. Drupal 8 includes a RESTful <a href=\"https://www.drupal.org/docs/8/api/restful-web-services-api/restful-web-services-api-overview\">web services API</a>.. Using these API's, you can integrate any front-end with a WordPress or Drupal instance. Let's call these \"traditional providers\"<strong>.</strong></p>\r\n<p>On the other hand, there are \"API-frst\" SaaS offerings like <a href=\"../\">ButterCMS</a>&nbsp;that are built solely around API integration.</p>\r\n<p>So, considering traditional vs. headless, what&rsquo;s the better approach?</p>\r\n<p>It depends. Both options work. If you're familiar with a traditional open-source solution like WordPress or Drupal, leveraging their API's for front-end freedom may seem attractive. But ButterCMS and CloudCMS are designed for the headless approach and offer a better developer experience.</p>\r\n<p>For example, WordPress offers official <a href=\"https://developer.wordpress.org/rest-api/using-the-rest-api/client-libraries/\">API clients</a> for only two languages and no official guides. ButterCMS offers <a href=\"../docs/\">API clients for seven languages</a> and over a dozen guides for various frameworks.</p>\r\n<p>Traditional providers like WordPress can also be severely limited in their flexibility and customization when integrated via API. This sounds surprising, since WordPress powers 27% of the web and is known for its rich, mature ecosystem of plugins that allow you to build anything from a massive publishing website to an eCommerce store.</p>\r\n<p>The problem is that most of the WordPress ecosystem does not address API usage. For example, to enable custom-fields in WordPress requires a <a href=\"https://codex.wordpress.org/Custom_Fields\">plugin</a> and a self-managed WordPress instance. But once the plugin is setup and custom fields are created, there&rsquo;s no documentation on how the custom fields would be fetched over an API. Underscoring this problem is the existence of yet another plugin called <a href=\"https://wordpress.org/plugins/wp-rest-api-custom-fields/\">WP REST API Custom Fields</a> that aims to solve this. However as of the time of this writing, that plugin hasn&rsquo;t been updated in over two years.</p>\r\n<p>In cases like this, the plugin-based extensibility of traditional providers like WordPress become useless and potentially impossible to work around. Headless solutions, on the other hand, are built from the ground-up to support flexibility and customization. For example, ButterCMS not only allows you to create custom content models and fields, it even allows you to customize the admin UI into user-friendly <em>workspaces</em>.</p>\r\n<p>What headless&nbsp;CMS solutions lack in available plugins, they make up for by integrating into a codebase and tech stack you fully own and understand. This means you can drop in other useful open source plugins or <a href=\"http://nordicapis.com/why-you-should-build-apps-with-an-api-backend-baas/\">Backend-as-a-Service</a> providers as you need. For example, you can combine a headless&nbsp;CMS with an API-based eCommerce backend like <a href=\"https://www.moltin.com/\">Moltin</a> to build a complete eCommerce website without a database (or even a server!).</p>\r\n<h2><strong>Hosting vs Self-hosted</strong></h2>\r\n<p>Another consideration is whether to manage <strong>hosting&nbsp;</strong>yourself or not.</p>\r\n<p>As mentioned earlier, with traditional providers like WordPress, self-managed hosting may be your only option if you want to customize your CMS beyond default settings. When considering self-hosting management, remember you&rsquo;re not just dealing with hosting fees, but moreover, full responsibility over making sure your website stays online and is secure. This includes database maintenance and backups, installing security upgrades, and having server monitoring systems in place.</p>\r\n<p>Chances are, your development team doesn&rsquo;t enjoy spending their time backing up databases, setting up hosting, installing upgrades, and being responsible for monitoring content management system uptime. Going with a hosted solution means you are almost 100% freed from any type of maintenance.</p>\r\n<p>With headless CMSs, self-hosting is an option (eg. CloudCMS offers this), but hosted offerings are more standard. The benefit of this approach is that you never have to worry about maintenance or uptime for your CMS. You get to build your website and move onto more important things.</p>\r\n<h2><strong>Understanding Pricing</strong></h2>\r\n<p>When looking at SaaS providers there are four key areas:</p>\r\n<ol>\r\n<li>Amount of content you can manage</li>\r\n<li>Number of API calls allowed</li>\r\n<li>Number of user accounts</li>\r\n<li>Uptime</li>\r\n</ol>\r\n<p>Different products use different terms in their pricing plans, but generally it comes down to these four criteria. For example, ButterCMS offers unlimited API calls but caps on the amount of content, whereas CloudCMS offers caps on API calls but an unlimited amount of content. Simple, right? Also consider add-ons that you might care about such as publishing workflows, localization, and webhooks.</p>\r\n<p>One important factor to look at is support. When your team runs into a time-sensitive problem, quick assistance from a knowledgeable support engineer is hugely beneficial. Headless CMS providers are popping up all over the world, so in addition to responsiveness, consider timezone and language barriers that could affect communication.</p>\r\n<p>Another thing to pay close attention to is uptime &ndash; with a&nbsp;headless approach, your website is highly dependent on your CMS API. In most cases, if your CMS&rsquo;s API goes down, so will your website as it will be unable to fetch content. For this reason, ensure a near <a href=\"http://nordicapis.com/6-techniques-99-999-uptime/\">99.99% uptime level</a> guarantee from the vendor, and do proactively prevent data loss scenarios. For example, the ButterCMS Ruby client offers the ability to setup a <a href=\"https://github.com/buttercms/buttercms-ruby#fallback-data-store\">local fallback datastore</a> such as Redis so that your website functions even if it cannot successfully connect to the ButterCMS API.</p>\r\n<p>For larger projects, you may be interested in enterprise-level service level agreements and white-glove support such as working directly with a solution engineer from the vendor.</p>\r\n<h2>Evaluation Checklist</h2>\r\n<p>We&rsquo;ve covered a lot of information thus far. Even armed with this knowledge, making a decision is difficult given the sheer number of options. To help with this, follow this step-by-step checklist when guiding your evaluation and decision:</p>\r\n<ul>\r\n<li><strong>Usability</strong>: How simple and intuitive is the documentation, SDKs, and API?</li>\r\n<li><strong>Flexibility</strong>: Is the CMS flexible enough to meet the needs of your project?</li>\r\n<li><strong>Uptime</strong>: Is the API/SDK resilient and does it meet your uptime requirements?</li>\r\n<li><strong>Content editor</strong>: How intuitive is the interface for your content editors?</li>\r\n<li><strong>Support</strong>: In what country and timezone is the vendor based, and what level of support and responsiveness do they demonstrate?</li>\r\n<li><strong>Pricing</strong>: Is the pricing scalable and predictable for your project (will API-usage based pricing can spike up unpredictably if your website traffic increases)?</li>\r\n</ul>\r\n<h2><strong>Wrap Up</strong></h2>\r\n<p>Remember that the key benefit of a headless CMS is they save your development team time and money. You can&rsquo;t beat working with your favorite tech stack while having nearly zero maintenance.</p>\r\n<p>If you&rsquo;re an agency, you&rsquo;re able to launch your project faster and move on to the next project. If you&rsquo;re a technology startup, you can knockout your CMS requirements in a day and get back to focusing on your core product.</p>\r\n<p>To maximize this, above all other factors, we recommend choosing your solution based on developer experience. Which CMS is the easiest to integrate? Which CMS has the best documentation? Which CMS has the simplest SDKs? Don&rsquo;t sweat a few extra bucks here and there on subscription costs &mdash; chances are a couple days worth of your development team&rsquo;s time is much more expensive than the subscription costs you are fretting over.</p>","summary":"Your go-to guide on deciding what headless CMS to use for your project.","seo_title":"Headless CMS Buyers Guide","meta_description":"Your go-to guide on deciding what headless CMS to use for your project.","status":"published"},{"url":"https://buttercms.com/blog/5-baas-backend-as-a-service-tools","created":"2017-05-25T04:46:12.462944Z","published":"2017-05-25T04:46:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://d2wzhk7xhrnk1x.cloudfront.net/altFGBdQSqyJN1N4ctB6_startup-photos.jpg","slug":"5-baas-backend-as-a-service-tools","title":"Cut Development Time in Half with these 5 API-based Tools","body":"<p>Why spend time building things that you can buy or rent?</p>\r\n<p>If you've never heard of the term \"BaaS\" before, it stands for \"Backend as a Service\" and refers to third-party services that can be integrated into your applications to build out specific functionality quickly.</p>\r\n<p>For example, imagine how much work it'd take your team to build a single sign on service for your product along with an admin interface for provisioning and managing user permissions. Sound like a pain? Well good news, there are plenty of services that you can drop-in to achieve this without writing a single line of server code.</p>\r\n<p>In fact these days there are a number of successful companies who have been able to produce compelling products with barely any of their own server-side code.</p>\r\n<p>In this article we introduce five BaaS providers that address common features and take a look at how they work.</p>\r\n<h2>1)&nbsp;<a href=\"https://auth0.com/\">Auth0</a> for authentication</h2>\r\n<p>Imagine owning several server-rendered web apps, single page apps, APIs, and mobile apps that all need to authenticate and authorize a shared set of users?</p>\r\n<p>Auth0 makes this easier with its authentication platform. Auth0 can be integrated in a number of ways including <a href=\"https://manage.auth0.com/login\">hosted login pages</a> and fully-integrated forms built using their SDK's.&nbsp;</p>\r\n<p>For example, their hosted login page can be launched with a tiny amount of JavaScript code:</p>\r\n<pre class=\"language-javascript\"><code>window.addEventListener('load', function() {\r\n\r\n var webAuth = new auth0.WebAuth({\r\n   domain: 'YOUR_AUTH0_DOMAIN',\r\n   clientID: 'YOUR_CLIENT_ID',\r\n   redirectUri: window.location.href,\r\n   audience: 'https://YOUR_AUTH0_DOMAIN/userinfo',\r\n   responseType: 'token id_token',\r\n   scope: 'openid'\r\n });\r\n\r\n var loginBtn = document.getElementById('btn-login');\r\n\r\n loginBtn.addEventListener('click', function(e) {\r\n   e.preventDefault();\r\n   webAuth.authorize();\r\n });\r\n});</code></pre>\r\n<p>Auth0 also provides an admin interface for managing users, permissions, and even impersonation.</p>\r\n<p><img src=\"https://d2wzhk7xhrnk1x.cloudfront.net/ZYA5Sy2VTPqxayX7unAN_User%20Details.png\" alt=\"\" /></p>\r\n<p>Auth0 even offers nice extras like multi-factor authentication and breached password detection.</p>\r\n<h2>2)&nbsp;<a href=\"../\">ButterCMS</a> for blogs and content management</h2>\r\n<p>Imagine you've built a website using your favorite tech stack (eg. Node.js, Rails, React). Now imagine that you need to add a client-friendly blog and content management system your application&ndash;something as simple to use as WordPress.</p>\r\n<p>Building a blog and CMS backend are probably the least exciting things you want to be working on. Luckily, <a href=\"../\">ButterCMS</a> makes this easy.</p>\r\n<p>ButterCMS provides APIs and <a href=\"../docs/\">SDKs</a> for integrating dynamic content into your application, along with a client-friendly admin interface for content editing and publishing.</p>\r\n<p>For example, fetching your blog posts or page content as JSON can be done with this simple code using the <a href=\"../docs/api-client/javascript\">ButterCMS JavaScript client</a>:</p>\r\n<pre class=\"language-javascript\"><code>butter.post.list().then(function(response) {\r\n console.log(response)\r\n})\r\n\r\nbutter.content.retrieve([\"homepage\"]).then(function(response) {\r\n console.log(response)\r\n})\r\n</code></pre>\r\n<p>ButterCMS's admin interface is simple and intuitive so you don't need to worry about your content editors bugging you about how to do things.</p>\r\n<p><img src=\"https://d2wzhk7xhrnk1x.cloudfront.net/yu1VNUmZQOoKyJAkdWCX_app-cf-lp.b407208f4417.png\" alt=\"\" /></p>\r\n<h2>3)&nbsp;<a href=\"https://formkeep.com/\">FormKeep</a> for forms</h2>\r\n<p>Imagine you've built a simple static website. Now imagine that you need to add a custom designed contact form that can integrate with your CRM and send an auto-response email.</p>\r\n<p>Building a custom server application to handle the form's POST requests sounds like a painful chore, right? <a href=\"https://formkeep.com/\">FormKeep</a> exists to save you from that trouble.</p>\r\n<p>You use FormKeep by simply pointing your forms to their endpoint:</p>\r\n<pre class=\"language-markup\"><code>&lt;form action=\"https://formkeep.com/f/df42a5f6bd1a\" method=\"POST\"&gt; \r\n  &lt;input type=\"text\" name=\"name\"&gt;\r\n  &lt;input type=\"text\" name=\"email\"&gt;\r\n  &lt;input type=\"submit\" value=\"Submit\"&gt;\r\n&lt;/form&gt;\r\n</code></pre>\r\n<p>FormKeep lets you setup custom response emails and integrations with practically any CRM or backend using Zapier.</p>\r\n<p><img src=\"https://d2wzhk7xhrnk1x.cloudfront.net/KHGfZFXuRCWDZi9C6BUT_Screen%20Shot%202017-05-29%20at%2011.20.27%20AM.png\" alt=\"\" /></p>\r\n<h2>4)&nbsp;<a href=\"http://moltin.com/\">Moltin</a> for Ecommerce</h2>\r\n<p>If you're looking to build an Ecommerce website or app, Moltin offers a wide set of API's that support everything from inventory, shopping carts, checkout, and payments. Moltin is incredibly useful for offering cross-platform shopping experiences, or if you want to build unique web experiences using your preferred tech stack.</p>\r\n<p>Moltin's API is extensive, but to get an idea of what it looks like, here's an example request that adds a product to a user's shopping cart:</p>\r\n<pre class=\"language-undefined\"><code>curl -X POST https://api.moltin.com/v2/carts/supercart/items \\\r\n&nbsp;-H \"Authorization: Bearer XXXX\" \\\r\n&nbsp;-H \"Content-Type: application/json\" \\\r\n&nbsp;-d '{\"data\":{\"type\":\"cart_item\",\"id\":\"9bbf14aa-15ae-42f4-8eed-d860a7c8046f\",\"quantity\":1}}'</code></pre>\r\n<h2>5)&nbsp;<a href=\"https://sendbird.com\">SendBird</a> for messaging and chat</h2>\r\n<p>How many times have you built messaging or chat functionality into an application? If your answer is more than once, chances are you know you'd prefer someone else take care of it the next time around.</p>\r\n<p>SendBird offers SDK's that cover the whole package from front-end UI to backend API's, so you don't have to worry about meticulously building chat interfaces or scaling the backend to millions of concurrent users.</p>\r\n<p>For example, posting a message from a user in JavaScript is as simple as three lines of code:</p>\r\n<pre class=\"language-javascript\"><code>channel.sendUserMessage(message, data, customType, function(response, error){\r\n   if (error) {\r\n       console.error(error);\r\n   }\r\n});</code></pre>\r\n<p>SendBird supports various implementations including 1-on-1 messaging, group chat, and open channels. They also offer nice advanced features such as read receipts, spam flood protection, and moderation tools.</p>\r\n<h2>Wrap Up</h2>\r\n<p>We love hearing about new backend service providers, so let us know in the comments or submit them to our <a href=\"https://github.com/rogerjin12/awesome-baas\">curated list on GitHub</a>.</p>","summary":"Why spend time building things that you can buy or rent? Backend as a Service (or \"BaaS\") refers to third-party services that can be integrated into your applications to build out specific functionality quickly.","seo_title":"5 BaaS Tools that can Cut Development Time  in Half","meta_description":"Backend as a Service (or \"BaaS\") refers to third-party services that can be integrated into your applications to build features quickly.","status":"published"},{"url":"https://buttercms.com/blog/when-youre-a-rails-developer-but-your-client-wants-wordpress","created":"2017-05-24T23:17:11.582509Z","published":"2017-05-24T23:17:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://d2wzhk7xhrnk1x.cloudfront.net/zAgJS3FxRO6B0M7AGh2a_Rails.6b9ef8350bf3.png","slug":"when-youre-a-rails-developer-but-your-client-wants-wordpress","title":"When you're a Rails developer but your client wants WordPress","body":"<p>Suppose you've built a Rails app for a client. A couple of months after launching their MVP, your client wants to ramp up their marketing and they ask you to add a blog to their website. \"It'd be great if it were WordPress\", they tell you. \"Oh, and our SEO consultant tells us it should live on our primary domain versus a subdomain.\"</p>\r\n<p>The thought of WordPress sends shivers down your spine, but you start quietly doing some research on your options.</p>\r\n<p>Integrating WordPress into your Rails app is impossible, but if you run WordPress (or a similar blogging solution like Ghost) separately it'd require hosting and have to live on a separate subdomain, which will cause great dissapointment to your SEO-enthused client.&nbsp;</p>\r\n<p>You explore the workaround of setting up a reverse proxy, but it looks extremely unpleasant. And even after all that trouble, you'll still need to figure out how to customize templates to get the design to match your beautiful Rails website&ndash;you wonder if they could share the same layout and CSS...</p>\r\n<p>Determined to find something that can integrate into your Rails app, you scour Github for open-source blog engines. You hop from one promising repository to the next. The first project you find looks good but hasn't been updated in three years. Another requires adding a bunch of bloated database tables to your already over-burdened database. Your hope begins to fade...</p>\r\n<p>If this situation sounds familiar to you, you're not alone.</p>\r\n<p>It's why we created a blog engine and CMS that integrates with Rails in one minute. Friendly UI for your clients, zero maintenance for you, and did we mention it integrates with Rails in <strong>one minute</strong>?</p>\r\n<p>Here's proof.</p>\r\n<p><iframe src=\"//www.youtube.com/embed/q6pHWj-92YI\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"></iframe></p>","summary":"Suppose you've built a Rails app for a client. A couple of months after launching their MVP, your client wants to ramp up their marketing and they ask you to add a blog to their website. \"It'd be great if it were WordPress\", they tell you. \"Oh, and our SEO ...","seo_title":"You're a Rails developer but the client wants WordPress","meta_description":"A couple of months after launching their MVP, your client wants to ramp up their marketing and they ask you to add a blog to their website..","status":"published"},{"url":"https://buttercms.com/blog/adding-retries-to-csharp-api-client","created":"2017-03-30T16:45:28.264443Z","published":"2017-03-31T16:45:00Z","author":{"first_name":"Roger","last_name":"Jin","email":"chase+roger@buttercms.com","slug":"roger-jin","bio":"Roger Jin is an engineer at ButterCMS. He loves talking and pairing with other developers. You can find him at roger@buttercms.com  where he will definitely reply to you.","title":"","linkedin_url":"","facebook_url":"","instagram_url":"","pinterest_url":"","twitter_handle":"","profile_image":"https://d2wzhk7xhrnk1x.cloudfront.net/NM2NUFGSSOyadDnaTETE_r-small.jpg"},"categories":[],"tags":[],"featured_image":"https://d2devwt40at1e2.cloudfront.net/api/file/DMOUt9mQvOR5uJw3WzUM","slug":"adding-retries-to-csharp-api-client","title":"How we Added Auto-Retries to our C# API Client","body":"<p>Networks are <a href=\"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing\">unreliable</a>. At some point we&rsquo;ve all experienced trouble connecting to Wi-Fi or had a phone call drop on us abruptly.</p>\r\n<p>The networks connecting our servers are&nbsp;generally&nbsp;more reliable than cellular networks and home ISPs, but given enough information moving across the wire, they&rsquo;re still going to fail in unpredictable&nbsp;ways. Outages, routing problems, and other intermittent failures may be statistically rare,&nbsp;but are still bound to be happening all the time at some ambient background rate.</p>\r\n<p>To overcome this sort of inherently unreliable environment, it&rsquo;s important to design APIs and clients that will be robust in the event of failure. One&nbsp;straightforward strategy is having clients retry operations against remote services. Let's take a look at our <a href=\"https://github.com/buttercms/buttercms-csharp\">C# API client</a> and walkthrough adding auto-retries:</p>\r\n<h2>Diving into the C# API client</h2>\r\n<p><a href=\"../\">ButterCMS</a> is a \"Content Management System as a service\"&mdash;the database, logic, and administrative dashboard of a CMS is provided as a hosted service and its content is made available through a web API. You can retrieve the content through its API client and plug it into your website. In C#, the API methods can be called through a <a href=\"https://github.com/ButterCMS/buttercms-csharp/blob/master/ButterCMS/ButterCMSClient.cs\">single class</a>.</p>\r\n<p>Let's take a look at the structure of the class. It has a number of public methods that send API requests through the private Execute(string queryString) and ExecuteAsync(string queryString) methods. We'll just deal with the Executemethod and its synchronous callers for simplicity's sake. Here's one of the public methods, used for retrieving a list of blog posts:</p>\r\n<pre class=\"language-csharp\"><code>private string authToken; // Authorization token set in the ButterCMSClient constructor\r\nprivate const string retrievePostsEndpoint = \"v2/posts/{0}\"; // Base URL for blog posts on the API\r\n\r\n// ... Code excluded for brevity ...\r\n\r\npublic PostResponse RetrievePost(string postSlug)\r\n{\r\n    var queryString = new StringBuilder();\r\n    queryString.Append(string.Format(retrievePostEndpoint, postSlug));\r\n    queryString.Append(\"?\");\r\n    queryString.Append(authTokenParam);\r\n    var postResponse = JsonConvert.DeserializeObject&lt;PostResponse&gt;(Execute(queryString.ToString()), serializerSettings);\r\n    return postResponse;\r\n}\r\n</code></pre>\r\n<p>Nice and simple. As you can see, it takes a postSlug parameter (which is just the unique URL segment that identifies the blog post we want to load), assembles it into the post's URL on the ButterCMS server, and passes it to the Execute(string queryString) method, which gets a JSON response and returns it for marshaling into our PostResponseclass. We can then take that data and render it in a page template on our public website.</p>\r\n<p>Let's dive a little deeper into what happens inside the Execute method:</p>\r\n<pre class=\"language-csharp\"><code>private HttpClient httpClient; // System.Net.Http.HttpClient instance, set in the ButterCMSClient constructor\r\n\r\n// ... Code excluded for brevity ...\r\n\r\nprivate string Execute(string queryString)\r\n{\r\n    try\r\n    {\r\n        var response = httpClient.GetAsync(queryString).Result;\r\n        if (response.IsSuccessStatusCode)\r\n        {\r\n            return response.Content.ReadAsStringAsync().Result;\r\n        }\r\n        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)\r\n        {\r\n            throw new InvalidKeyException(\"No valid API key provided.\");\r\n        }\r\n        if (response.StatusCode &gt;= System.Net.HttpStatusCode.InternalServerError)\r\n        {\r\n            throw new Exception(\"There is a problem with the ButterCMS service\");\r\n        }\r\n    }\r\n    catch (TaskCanceledException taskException)\r\n    {\r\n        if (!taskException.CancellationToken.IsCancellationReques&zwnj;​ted)\r\n        {\r\n            throw new Exception(\"Timeout expired trying to reach the ButterCMS service.\");\r\n        }\r\n        throw taskException;\r\n    }\r\n    catch (HttpRequestException httpException)\r\n    {\r\n        throw httpException;\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        throw ex;\r\n    }\r\n    return string.Empty;\r\n}\r\n</code></pre>\r\n<p>This method simply makes an HTTP GET request to the given URL and returns the response body as a string, which can be parsed by the caller as JSON, XML, etc. It has some built-in error checking which is used to throw exceptions in case of a bad response. This prevents callers from accidentally trying to parse them as legitimate data.</p>\r\n<p>Now that you've seen how the API client works, lets add auto-retries!&nbsp;</p>\r\n<h2>Implementing&nbsp;auto-retry</h2>\r\n<p>Since our example API client is effectively read-only (only makes GET requests), we can use a \"dumb\" retry mechanism that simply re-sends requests until one succeeds or we exceed our maximum allowed number of retries.&nbsp;</p>\r\n<p>To do this,&nbsp;we need to \"watch\" the Execute method so that we can re-execute it if it throws an exception. This can be done with a simple wrapper method that catches the exceptions. First, let's rename our old Execute method to ExecuteSingle to more accurately express its purpose.</p>\r\n<p>Then&nbsp;let's build our wrapper method. We'll call it Execute so that our existing public methods will call it instead instead of the function we just renamed. For now we'll just make it a simple wrapper that doesn't add any functionality:</p>\r\n<pre class=\"language-csharp\"><code>private string Execute(string queryString)\r\n{\r\n    return ExecuteSingle(queryString);\r\n}\r\n</code></pre>\r\n<p>The API client should now function exactly as before, so we really haven't accomplished anything yet. Let's start by writing a simple loop to retry the request up to a certain number of times. To \"keep the loop going\" in the event that ExecuteSingle throws an exception, we need to catch those exceptions inside the loop.</p>\r\n<pre class=\"language-csharp\"><code>private string Execute(string queryString)\r\n{\r\n    // maxRequestTries is a private class member set to 3 by default, \r\n    // optionally set via a constructor parameter (not shown)\r\n    var remainingTries = maxRequestTries;  \r\n\r\n    do \r\n    {\r\n        --remainingTries;\r\n        try \r\n        {\r\n            return ExecuteSingle(queryString);\r\n        }\r\n        catch (Exception) \r\n        {\r\n\r\n        }\r\n    }\r\n    while (remainingTries &gt; 0)\r\n}\r\n</code></pre>\r\n<p>This code will escape the loop via the return statement if the request is successful. If an exception is thrown by ExecuteSingle it will be swallowed and the loop will continue up to maxRequestTries times. The do { ... } while ()syntax ensures that requests will always execute at least once, even if maxRequestTries is misconfigured and set to something like 0 or -10.</p>\r\n<p>Of course, this code has a glaring problem&mdash;it swallows all the exceptions. If all the requests fail, it will just return a null string. But how can we handle this? We can't throw the exceptions from inside the catch (Exception) { } block or execution will escape the loop, defeating the purpose of the entire method. We should throw the exceptions after, and only if, all of the requests fail. We can do this by aggregating them in a List&lt;Exception&gt; and throwing an AggregateException at the end of the method.</p>\r\n<pre class=\"language-csharp\"><code>private string Execute(string queryString)\r\n{\r\n    var remainingTries = maxRequestTries;  \r\n    var exceptions = new List&lt;Exception&gt;();\r\n\r\n    do \r\n    {\r\n        --remainingTries;\r\n        try \r\n        {\r\n            return ExecuteSingle(queryString);\r\n        }\r\n        catch (Exception e) \r\n        {\r\n            exceptions.Add(e);\r\n        }\r\n    }\r\n    while (remainingTries &gt; 0)\r\n\r\n    throw new AggregateException(exceptions)\r\n}\r\n</code></pre>\r\n<p>If all the requests fail, this method will now throw an AggregateException containing a list of all the exceptions thrown on each request. If any request succeeds, no exceptions will be thrown and we'll just get our response string. This is definitely sufficient. But let's make it just a little nicer&mdash;most repeated failures will be caused by a persistent problem, so each request will throw the exact same exception. If all our requests throw an InvalidKeyException (which happens when our API auth token is invalid), do we really want to return an AggregateException with, say, 3 identical InvalidKeyExceptions? Wouldn't it be more ergonomic to just throw a single InvalidKeyException? To do this, we need to \"collapse\" any duplicates in our exceptions list into a single \"representative\" exception. We can use Linq's Distinct method to do this, but it won't collapse the exceptions by default because they're...well...distinct objects and Distinct will compare them by reference. We can use its overload, which accepts a custom IEqualityComparer&lt;T&gt;that we can use to identify exceptions that can be considered duplicates for our purposes. Here's our implementation:</p>\r\n<pre class=\"language-csharp\"><code>private class ExceptionEqualityComparer : IEqualityComparer&lt;Exception&gt;\r\n{\r\n    public bool Equals(Exception e1, Exception e2)\r\n    {\r\n        if (e2 == null &amp;&amp; e1 == null)\r\n            return true;\r\n        else if (e1 == null | e2 == null)\r\n            return false;\r\n        else if (e1.GetType().Name.Equals(e2.GetType().Name) &amp;&amp; e1.Message.Equals(e2.Message))\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    public int GetHashCode(Exception e)\r\n    {\r\n        return (e.GetType().Name + e.Message).GetHashCode();\r\n    }\r\n}\r\n</code></pre>\r\n<p>This equality comparer considers two exceptions to be equal if they share the same type and Message property. For our purposes, this is a good enough definition of \"duplicates\".</p>\r\n<p>Now we can collapse the duplicate exceptions thrown by our request attempts:</p>\r\n<pre class=\"language-csharp\"><code>private string Execute(string queryString)\r\n{\r\n    var remainingTries = maxRequestTries;  \r\n    var exceptions = new List&lt;Exception&gt;();\r\n\r\n    do \r\n    {\r\n        --remainingTries;\r\n        try \r\n        {\r\n            return ExecuteSingle(queryString);\r\n        }\r\n        catch (Exception e) \r\n        {\r\n            exceptions.Add(e);\r\n        }\r\n    }\r\n    while (remainingTries &gt; 0)\r\n\r\n    var uniqueExceptions = exceptions.Distinct(new ExceptionEqualityComparer());\r\n\r\n    if (uniqueExceptions.Count()) == 1)\r\n        throw uniqueExceptions.First();\r\n\r\n    return new AggregateException(\"Could not process request\", uniqueExceptions);\r\n}\r\n</code></pre>\r\n<p>This is a little more ergonomic. In short, we throw only distinct exceptions generated by the request attempts. If there's only one, either because we only made one attempt or because multiple attempts all failed for the same reason, we throw that exception. If there are multiple exceptions, we throw an AggregateException with one of each type/message combo.&nbsp;</p>\r\n<h2>Wrapping Up</h2>\r\n<p>We're all done! Our API client is now more robust and can withstand incidents related to network unreliability. If you're interested in exploring further check out&nbsp;the <a href=\"https://github.com/buttercms/buttercms-csharp\">full code on Github</a>&nbsp;and the <a href=\"../docs/api\">ButterCMS API documentation</a>.</p>\r\n<p>&nbsp;</p>","summary":"Networks are unreliable. One way to overcome this is by having clients retry API requests when they fail. Learn how to add retries to a C# API client.","seo_title":"How to Add Retries to a C# API Client","meta_description":"Networks are unreliable. One way to overcome this is by having clients retry API requests when they fail. Learn how to add retries to a C# API client.","status":"published"}],"meta":{"next_page":2,"count":48,"previous_page":null}}